name: Deploy Frontend

on:
  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub Secrets
  # push:
  #   branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment configuration
        id: check-deploy
        run: |
          echo "üîç Checking deployment configuration..."
          
          if [ -z "${{ secrets.HOST }}" ] || [ -z "${{ secrets.USERNAME }}" ] || [ -z "${{ secrets.PRIVATE_KEY }}" ]; then
            echo ""
            echo "‚ö†Ô∏è  Deployment secrets are not configured. Skipping deployment."
            echo ""
            echo "üéâ Code changes have been successfully pushed to GitHub!"
            echo ""
            echo "üìã To enable automatic deployment, configure these GitHub Secrets:"
            echo "   ‚Ä¢ HOST - Your server IP address or domain"
            echo "   ‚Ä¢ USERNAME - SSH username for server access"
            echo "   ‚Ä¢ PRIVATE_KEY - SSH private key content"
            echo "   ‚Ä¢ PORT - SSH port (optional, defaults to 22)"
            echo ""
            echo "üîß How to configure secrets:"
            echo "   1. Go to https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "   2. Click 'New repository secret'"
            echo "   3. Add each required secret with proper values"
            echo ""
            echo "üìñ For detailed instructions, see GITHUB_SECRETS_SETUP.md"
            echo ""
            echo "üöÄ Once configured, the next push will automatically deploy to your server."
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ All deployment secrets are configured"
            echo "üöÄ Proceeding with deployment..."
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi

      - name: Deploy via SSH
        if: steps.check-deploy.outputs.should_deploy == 'true' && secrets.HOST != '' && secrets.USERNAME != '' && secrets.PRIVATE_KEY != ''
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT || '22' }}
          script_stop: true
          script: |
            set -e
            cd /var/www/frontend_axenta

            echo "üîß Starting deployment process..."
            echo "üìç Current directory: $(pwd)"
            echo "üìç Current branch: $(git branch --show-current)"
            echo "üìç Current commit: $(git rev-parse --short HEAD)"

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Git –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å divergent branches
            echo "‚öôÔ∏è Configuring Git..."
            git config pull.rebase false
            git config --global --add safe.directory $(pwd)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            echo "üì• Fetching changes..."
            git fetch --all --prune

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å—Ö–æ–¥—è—â–∏–µ—Å—è –≤–µ—Ç–∫–∏
            LOCAL=$(git rev-parse HEAD)
            REMOTE=$(git rev-parse origin/main)

            if [ "$LOCAL" != "$REMOTE" ]; then
              echo "‚ö†Ô∏è Local and remote branches are different"
              echo "Local:  $LOCAL"
              echo "Remote: $REMOTE"
              echo "üîÑ Performing hard reset to origin/main..."
              git reset --hard origin/main
              echo "‚úÖ Repository updated to latest version"
            else
              echo "‚úÖ Repository is already up to date"
              git pull origin main || git reset --hard origin/main
            fi

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            echo "üìç Updated to commit: $(git rev-parse --short HEAD)"
            echo "üìç Commit message: $(git log -1 --pretty=%B)"

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            echo "üì¶ Installing dependencies..."
            /usr/bin/npm install

            # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            echo "üèóÔ∏è Building project..."
            /usr/bin/npm run build

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º nginx
            echo "üîÑ Reloading nginx..."
            sudo systemctl reload nginx

            echo "üéâ Deployment completed successfully!"
