import { ref, computed, watch } from 'vue'
import axios from 'axios'
import { config } from '@/config/env'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è localStorage
const ACCESS_TOKEN_KEY = 'local_access_token'
const REFRESH_TOKEN_KEY = 'local_refresh_token'
const USER_KEY = 'local_user'

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const accessToken = ref(localStorage.getItem(ACCESS_TOKEN_KEY))
const refreshToken = ref(localStorage.getItem(REFRESH_TOKEN_KEY))
const user = ref(null)
const isLoading = ref(false)
const error = ref(null)

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
const loadUserFromStorage = () => {
  const storedUser = localStorage.getItem(USER_KEY)
  if (storedUser) {
    try {
      user.value = JSON.parse(storedUser)
    } catch (err) {
      console.error('Failed to parse stored user:', err)
      localStorage.removeItem(USER_KEY)
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadUserFromStorage()

// –°–æ–∑–¥–∞–µ–º axios instance –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const localApiClient = axios.create({
  baseURL: config.apiBaseUrl,
  timeout: 30000,
})

// Interceptor –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
localApiClient.interceptors.request.use(
  (config) => {
    const token = accessToken.value
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    return config
  },
  (error) => Promise.reject(error)
)

// Interceptor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
localApiClient.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config

    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true

      // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
      if (refreshToken.value) {
        try {
          await refreshAccessToken()
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          originalRequest.headers.Authorization = `Bearer ${accessToken.value}`
          return localApiClient.request(originalRequest)
        } catch (refreshError) {
          // –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
          logout()
          return Promise.reject(refreshError)
        }
      } else {
        // –ù–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        logout()
      }
    }

    return Promise.reject(error)
  }
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
const saveToStorage = () => {
  if (accessToken.value) {
    localStorage.setItem(ACCESS_TOKEN_KEY, accessToken.value)
  }
  if (refreshToken.value) {
    localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken.value)
  }
  if (user.value) {
    localStorage.setItem(USER_KEY, JSON.stringify(user.value))
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ localStorage
const clearStorage = () => {
  localStorage.removeItem(ACCESS_TOKEN_KEY)
  localStorage.removeItem(REFRESH_TOKEN_KEY)
  localStorage.removeItem(USER_KEY)
}

// –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
const login = async (username, password) => {
  isLoading.value = true
  error.value = null

  try {
    const response = await axios.post(`${config.apiBaseUrl}/local/login`, {
      username,
      password
    })

    if (response.data.status === 'success') {
      const { access_token, refresh_token, user: userData } = response.data.data
      
      accessToken.value = access_token
      refreshToken.value = refresh_token
      user.value = userData

      saveToStorage()

      console.log('‚úÖ Local login successful:', {
        user: userData.username,
        role: userData.role,
        company_id: userData.company_id
      })

      return userData
    } else {
      throw new Error(response.data.error || 'Login failed')
    }
  } catch (err) {
    const errorMessage = err.response?.data?.error || err.message || 'Login failed'
    error.value = errorMessage
    clearStorage()
    throw new Error(errorMessage)
  } finally {
    isLoading.value = false
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
const logout = async () => {
  console.log('üö™ Local logout initiated...')
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–∑—ã–≤–∞ refresh —Ç–æ–∫–µ–Ω–∞
    if (refreshToken.value) {
      await localApiClient.post('/local/logout', {
        refresh_token: refreshToken.value
      })
    }
  } catch (err) {
    console.warn('Failed to logout on server:', err)
  } finally {
    // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    accessToken.value = null
    refreshToken.value = null
    user.value = null
    error.value = null
    
    // –û—á–∏—â–∞–µ–º localStorage
    clearStorage()
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    localStorage.removeItem('token')
    localStorage.removeItem('user')
    localStorage.removeItem('axenta_token')
    localStorage.removeItem('axenta_user')
    localStorage.removeItem('axenta_company')
    localStorage.removeItem('demo_token')
    localStorage.removeItem('demo_user')

    console.log('‚úÖ Local logout completed')
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access —Ç–æ–∫–µ–Ω–∞
const refreshAccessToken = async () => {
  if (!refreshToken.value) {
    throw new Error('No refresh token available')
  }

  try {
    const response = await axios.post(`${config.apiBaseUrl}/local/refresh`, {
      refresh_token: refreshToken.value
    })

    if (response.data.status === 'success') {
      accessToken.value = response.data.data.access_token
      localStorage.setItem(ACCESS_TOKEN_KEY, accessToken.value)
      
      console.log('üîÑ Access token refreshed')
      return accessToken.value
    } else {
      throw new Error(response.data.error || 'Token refresh failed')
    }
  } catch (err) {
    console.error('Failed to refresh token:', err)
    throw err
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getCurrentUser = async () => {
  if (!accessToken.value) {
    throw new Error('No access token available')
  }

  try {
    const response = await localApiClient.get('/local/current_user')
    
    if (response.data.status === 'success') {
      user.value = response.data.data
      localStorage.setItem(USER_KEY, JSON.stringify(user.value))
      return user.value
    } else {
      throw new Error(response.data.error || 'Failed to get current user')
    }
  } catch (err) {
    console.error('Failed to get current user:', err)
    throw err
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
const registerUser = async (userData) => {
  try {
    const response = await localApiClient.post('/local/register', userData)
    
    if (response.data.status === 'success') {
      console.log('‚úÖ User registered successfully:', response.data.data)
      return response.data.data
    } else {
      throw new Error(response.data.error || 'Registration failed')
    }
  } catch (err) {
    const errorMessage = err.response?.data?.error || err.message || 'Registration failed'
    throw new Error(errorMessage)
  }
}

// –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
const isAuthenticated = computed(() => {
  return !!(accessToken.value && user.value)
})

const userRole = computed(() => {
  return user.value?.role || null
})

const userCompanyId = computed(() => {
  return user.value?.company_id || null
})

// –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
const hasRole = (role) => {
  return userRole.value === role
}

const hasAnyRole = (roles) => {
  return roles.includes(userRole.value)
}

const isAdmin = computed(() => hasRole('admin'))
const isManager = computed(() => hasRole('manager'))
const isTech = computed(() => hasRole('tech'))
const isAccountant = computed(() => hasRole('accountant'))

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫
const clearError = () => {
  error.value = null
}

// –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
watch(accessToken, (newToken) => {
  if (!newToken) {
    user.value = null
  }
})

// Composable —Ñ—É–Ω–∫—Ü–∏—è
export function useLocalAuth() {
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    user: computed(() => user.value),
    accessToken: computed(() => accessToken.value),
    refreshToken: computed(() => refreshToken.value),
    isLoading: computed(() => isLoading.value),
    error: computed(() => error.value),
    isAuthenticated,
    userRole,
    userCompanyId,

    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–æ–ª–µ–π
    isAdmin,
    isManager,
    isTech,
    isAccountant,

    // –ú–µ—Ç–æ–¥—ã
    login,
    logout,
    getCurrentUser,
    refreshAccessToken,
    registerUser,
    hasRole,
    hasAnyRole,
    clearError,

    // API –∫–ª–∏–µ–Ω—Ç
    apiClient: localApiClient,
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ composable
export {
  localApiClient,
  isAuthenticated,
  user,
  userRole,
  userCompanyId,
}
