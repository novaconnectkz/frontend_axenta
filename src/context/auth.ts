import { config } from "@/config/env";
import axios, { type AxiosInstance } from "axios";
import {
  computed,
  type ComputedRef,
  inject,
  type InjectionKey,
  provide,
  ref,
  type Ref,
  watch,
} from "vue";

export interface User {
  accountBlockingDatetime: string | null;
  accountName: string;
  accountType: string;
  creatorName: string;
  id: string;
  lastLogin: string;
  name: string;
  username: string;
  email?: string;
  accountId?: number;
  isAdmin?: boolean;
  isActive?: boolean;
  language?: string;
  timezone?: number;
}

export interface Company {
  id: string;
  name: string;
  schema: string;
  isActive: boolean;
}

export interface LoginForm {
  username: string;
  password: string;
  tenantId?: string;
}

export interface AuthResponse {
  data: {
    user: User;
    token: string;
    company?: Company;
  };
}

export interface RefreshTokenResponse {
  token: string;
  expiresAt: string;
}

export interface AuthContext {
  user: Ref<User | null>;
  token: Ref<string | null>;
  company: Ref<Company | null>;
  login: (credentials: LoginForm) => Promise<void>;
  logout: () => void;
  refreshToken: () => Promise<void>;
  isAuthenticated: ComputedRef<boolean>;
  isLoading: Ref<boolean>;
  error: Ref<string | null>;
  clearError: () => void;
  hasRole: (role: string) => boolean;
  hasPermission: (permission: string) => boolean;
  apiClient: AxiosInstance;
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è localStorage
const TOKEN_KEY = "axenta_token";
const USER_KEY = "axenta_user";
const COMPANY_KEY = "axenta_company";
const TOKEN_EXPIRY_KEY = "axenta_token_expiry";

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
const isTokenExpired = (token: string): boolean => {
  if (!token) return true;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω JWT (–∏–º–µ–µ—Ç 3 —á–∞—Å—Ç–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∞–º–∏)
    const parts = token.split(".");
    if (parts.length !== 3) {
      // –≠—Ç–æ –Ω–µ JWT —Ç–æ–∫–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–∫–µ–Ω Axenta Cloud), —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–º
      console.log("üîç Non-JWT token detected, considering valid");
      return false;
    }
    
    // –î–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    const payload = JSON.parse(atob(parts[1]));
    const isExpired = Date.now() >= payload.exp * 1000;
    console.log("üïê JWT token expiry check:", { 
      exp: new Date(payload.exp * 1000).toLocaleString(),
      isExpired 
    });
    return isExpired;
  } catch (error) {
    console.error("‚ùå Error checking token expiry:", error);
    return true;
  }
};

const getTokenExpiry = (token: string): Date | null => {
  try {
    const payload = JSON.parse(atob(token.split(".")[1]));
    return new Date(payload.exp * 1000);
  } catch {
    return null;
  }
};

export const AuthKey: InjectionKey<AuthContext> = Symbol("auth");

export function useAuthProvider() {
  // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const demoUser: User = {
    accountBlockingDatetime: null,
    accountName: "Axenta Demo",
    accountType: "demo",
    creatorName: "System",
    id: "demo-user-1",
    lastLogin: new Date().toISOString(),
    name: "–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    username: "demo",
    email: "demo@axenta.ru",
    accountId: 2061, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π accountId –∏–∑ –ª–æ–≥–æ–≤
    isAdmin: true,
    isActive: true,
    language: "ru",
    timezone: 3,
  };

  const demoCompany: Company = {
    id: "4e12b3c9-529c-4fe7-98e1-025eed8cb258",
    name: "Axenta Demo Company",
    schema: "demo",
    isActive: true,
  };

  const user = ref<User | null>(null);
  const token = ref<string | null>(null);
  const company = ref<Company | null>(null);
  const isLoading = ref(false);
  const error = ref<string | null>(null);

  // –°–æ–∑–¥–∞–µ–º axios instance —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
  const apiClient = axios.create({
    baseURL: config.apiBaseUrl,
    timeout: 30000,
  });

  // Interceptor –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  apiClient.interceptors.request.use(
    (config) => {
      const currentToken = token.value || localStorage.getItem("axenta_token");
      const currentCompany = company.value || JSON.parse(localStorage.getItem("axenta_company") || "null");
      
      if (currentToken) {
        config.headers["authorization"] = `Token ${currentToken}`;
        config.headers["Authorization"] = `Token ${currentToken}`;
        
        if (currentCompany) {
          config.headers["X-Tenant-ID"] = currentCompany.id;
        }
      }
      
      console.log("üîê Auth headers:", {
        authorization: config.headers["authorization"] ? "Token ***" : "none",
        tenantId: config.headers["X-Tenant-ID"] || "none"
      });
      
      return config;
    },
    (error) => Promise.reject(error)
  );

  // Interceptor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  apiClient.interceptors.response.use(
    (response) => response,
    async (error) => {
      if (error.response?.status === 401 && token.value) {
        // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
        try {
          await refreshToken();
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          const originalRequest = error.config;
          originalRequest.headers["authorization"] = `Token ${token.value}`;
          return apiClient.request(originalRequest);
        } catch (refreshError) {
          // –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
          logout();
          return Promise.reject(refreshError);
        }
      }
      return Promise.reject(error);
    }
  );

  const isAuthenticated = computed(() => {
    return !!(user.value && token.value && !isTokenExpired(token.value));
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const loadFromStorage = () => {
    console.log("üîÑ Loading Axenta Cloud auth data from localStorage...");
    
    try {
      const storedToken = localStorage.getItem(TOKEN_KEY);
      const storedUser = localStorage.getItem(USER_KEY);
      const storedCompany = localStorage.getItem(COMPANY_KEY);

      console.log("üì¶ Axenta Cloud storage check:", {
        token: storedToken ? `EXISTS (${storedToken.length} chars)` : 'MISSING',
        user: storedUser ? 'EXISTS' : 'MISSING',
        company: storedCompany ? 'EXISTS' : 'MISSING'
      });

      if (storedToken && storedUser) {
        try {
          const parsedUser = JSON.parse(storedUser);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          if (parsedUser.username === 'demo' && parsedUser.accountType === 'demo') {
            console.log("‚ö†Ô∏è Found demo user in storage, checking for real user...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–∞—Ö
            const altUser = localStorage.getItem('user') || localStorage.getItem('current_user');
            if (altUser) {
              const altParsedUser = JSON.parse(altUser);
              if (altParsedUser.username !== 'demo') {
                console.log("‚úÖ Found real user in alternative storage");
                user.value = altParsedUser;
                token.value = storedToken;
                if (storedCompany) {
                  company.value = JSON.parse(storedCompany);
                }
                return;
              }
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è JWT)
          let isExpired = false;
          try {
            isExpired = isTokenExpired(storedToken);
          } catch (e) {
            // –ù–µ JWT —Ç–æ–∫–µ–Ω, —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
            isExpired = false;
          }
          
          console.log("üïê Token expiry check:", { 
            isJWT: storedToken.includes('.'),
            isExpired 
          });
          
          if (!isExpired) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ localStorage
            if (parsedUser.accountType && parsedUser.accountType !== 'partner') {
              console.log("üö´ Non-partner user found in storage, clearing...");
              console.log("Account type:", parsedUser.accountType);
              clearStorage();
              return;
            }
            
            token.value = storedToken;
            user.value = parsedUser;
            
            if (storedCompany) {
              const parsedCompany = JSON.parse(storedCompany);
              company.value = parsedCompany;
            }
            
            console.log("‚úÖ Axenta Cloud auth data restored");
            console.log("üë§ Restored user:", user.value?.name, `(${user.value?.username})`);
            console.log("üè¢ Restored company:", company.value?.name);
          } else {
            console.log("‚ö†Ô∏è Token expired, clearing Axenta storage");
            clearStorage();
          }
        } catch (parseErr) {
          console.error("‚ùå Error parsing stored user data:", parseErr);
          clearStorage();
        }
      } else {
        console.log("‚ÑπÔ∏è No Axenta Cloud auth data found");
      }
    } catch (err) {
      console.error("‚ùå Error loading Axenta auth data:", err);
      clearStorage();
    }
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
  const saveToStorage = () => {
    try {
      if (token.value && user.value) {
        localStorage.setItem(TOKEN_KEY, token.value);
        localStorage.setItem(USER_KEY, JSON.stringify(user.value));
        if (company.value) {
          localStorage.setItem(COMPANY_KEY, JSON.stringify(company.value));
        }

        const expiry = getTokenExpiry(token.value);
        if (expiry) {
          localStorage.setItem(TOKEN_EXPIRY_KEY, expiry.toISOString());
        }
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ localStorage:", err);
    }
  };

  // –û—á–∏—â–∞–µ–º localStorage
  const clearStorage = () => {
    localStorage.removeItem(TOKEN_KEY);
    localStorage.removeItem(USER_KEY);
    localStorage.removeItem(COMPANY_KEY);
    localStorage.removeItem(TOKEN_EXPIRY_KEY);
  };

  const login = async (credentials: LoginForm) => {
    isLoading.value = true;
    error.value = null;
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à backend API –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Axenta
      const backendLoginUrl = `${config.apiBaseUrl}/auth/login`;
      console.log('üîê Attempting backend login to:', backendLoginUrl);
      console.log('üîß Config apiBaseUrl:', config.apiBaseUrl);
      
      // Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
      const maxRetries = 3;
      let lastError: any = null;
      
      for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ backend ${attempt}/${maxRetries}`);
          
          const response = await axios.post(
            backendLoginUrl,
            credentials,
            {
              timeout: 15000,
              headers: {
                'Content-Type': 'application/json'
              }
            }
          );

          console.log('‚úÖ Backend login response:', response.data);

          // Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { status: "success", data: { token, user } }
          if (response.data.status === 'success' && response.data.data) {
            const responseData = response.data.data;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ frontend
            if (responseData.user.accountType !== 'partner') {
              const errorMsg = `–î–æ—Å—Ç—É–ø –∫ CRM —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º Axenta. –í–∞—à —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: ${responseData.user.accountType}`;
              console.error('üö´ Access denied:', errorMsg);
              error.value = errorMsg;
              clearStorage();
              throw new Error(errorMsg);
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Axenta
            const axentaUser: User = {
              accountBlockingDatetime: responseData.user.accountBlockingDatetime,
              accountName: responseData.user.accountName,
              accountType: responseData.user.accountType,
              creatorName: responseData.user.creatorName,
              id: responseData.user.id,
              lastLogin: responseData.user.lastLogin,
              name: responseData.user.name,
              username: responseData.user.username,
              email: responseData.user.email,
              accountId: responseData.user.accountId,
              isAdmin: responseData.user.isAdmin,
              isActive: responseData.user.isActive,
              language: responseData.user.language,
              timezone: responseData.user.timezone,
            };

            user.value = axentaUser;
            token.value = responseData.token;

            // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
            company.value = {
              id: responseData.user.accountId?.toString() || "axenta-cloud",
              name: responseData.user.accountName || "Axenta Cloud",
              isActive: true,
            };

            saveToStorage();
            console.log('‚úÖ Axenta login successful, user saved:', user.value);
            return; // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
          } else {
            throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API");
          }
          
        } catch (err: any) {
          console.error(`‚ùå Backend login error (attempt ${attempt}):`, err);
          lastError = err;
          
          // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (403), –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏
          if (err.response?.status === 403) {
            console.log('üö´ Access denied - account type not allowed');
            break;
          }
          
          // –ï—Å–ª–∏ —ç—Ç–æ 502 –æ—à–∏–±–∫–∞ –∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º
          if (err.response?.status === 502 && attempt < maxRetries) {
            console.log(`‚è≥ –ü–æ–ª—É—á–µ–Ω 502, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
            await new Promise(resolve => setTimeout(resolve, 2000 * attempt)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            continue;
          }
          
          // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ 502 –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
          break;
        }
      }
      
      // –ï—Å–ª–∏ backend –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      if (lastError) {
        console.log('üîÑ Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
        
        try {
          const localLoginUrl = `${config.apiBaseUrl}/local/login`;
          console.log('üîê Attempting local login to:', localLoginUrl);
          
          const localResponse = await axios.post(
            localLoginUrl,
            credentials,
            {
              timeout: 15000,
              headers: {
                'Content-Type': 'application/json'
              }
            }
          );

          console.log('‚úÖ Local login response:', localResponse.data);

          // –õ–æ–∫–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { status: "success", data: { access_token, user, ... } }
          if (localResponse.data.status === "success" && localResponse.data.data) {
            const responseData = localResponse.data.data;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
            const userData = responseData.user;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ company_id
            let accountType = "local";
            if (userData.company_id && userData.company_id.includes("partner")) {
              accountType = "partner";
            } else if (userData.company_id && userData.company_id.includes("client")) {
              accountType = "client";
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–∞—Ä—Ç–Ω–µ—Ä, –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
            if (accountType !== "partner") {
              const errorMsg = `–î–æ—Å—Ç—É–ø –∫ CRM —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º Axenta. –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∏–ø: ${accountType}`;
              console.error('üö´ Local auth access denied:', errorMsg);
              error.value = errorMsg;
              clearStorage();
              throw new Error(errorMsg);
            }
            
            const localUser: User = {
              accountBlockingDatetime: null,
              accountName: userData.name || "Local User",
              accountType: accountType,
              creatorName: "Local Auth",
              id: userData.id.toString(),
              lastLogin: userData.last_login || new Date().toISOString(),
              name: userData.name || credentials.username,
              username: userData.username,
              email: userData.email || credentials.username,
              isAdmin: userData.role === "admin",
              isActive: userData.is_active,
              language: "ru",
              timezone: 3,
            };

            user.value = localUser;
            token.value = responseData.access_token; // –ò—Å–ø–æ–ª—å–∑—É–µ–º access_token

            // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ company_id
            company.value = {
              id: userData.company_id,
              name: "Local Company",
              isActive: true,
            };

            saveToStorage();
            console.log('‚úÖ Local login successful, user saved:', user.value);
            return; // –£—Å–ø–µ—à–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
          }
        } catch (localError: any) {
          console.log('‚ùå Local login also failed:', localError);
        }
        
        // –ï—Å–ª–∏ –∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        let errorMessage = "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É";
        
        if (lastError.response?.data?.detail) {
          if (Array.isArray(lastError.response.data.detail)) {
            errorMessage = lastError.response.data.detail.join(', ');
          } else {
            errorMessage = lastError.response.data.detail;
          }
        } else if (lastError.response?.status === 403) {
          errorMessage = lastError.response.data?.error || "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.";
        } else if (lastError.response?.status === 502) {
          errorMessage = `–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (502) –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
        } else if (lastError.response?.status === 503) {
          errorMessage = "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        } else if (lastError.response?.status === 504) {
          errorMessage = "–¢–∞–π–º–∞—É—Ç —Å–µ—Ä–≤–µ—Ä–∞ (504). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        } else if (lastError.response?.data?.error) {
          errorMessage = lastError.response.data.error;
        } else if (lastError.message) {
          errorMessage = lastError.message;
        }
        
        error.value = errorMessage;
        clearStorage();
        throw new Error(errorMessage);
      }
      
    } catch (err: any) {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
      console.error('‚ùå Top-level login error:', err);
      
      if (err.message && err.message.startsWith('–°–µ—Ä–≤–µ—Ä Axenta')) {
        // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
        throw err;
      }
      
      const errorMessage = err.response?.data?.error || err.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É";
      error.value = errorMessage;
      clearStorage();
      throw new Error(errorMessage);
    } finally {
      isLoading.value = false;
    }
  };

  const refreshToken = async () => {
    if (!token.value) {
      throw new Error("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
    }

    try {
      const response = await axios.post(
        `${config.apiBaseUrl}/auth/refresh`,
        {},
        {
          headers: {
            authorization: `Token ${token.value}`,
            ...(company.value && { "X-Tenant-ID": company.value.id }),
          },
        }
      );

      const newToken = response.data.token;
      token.value = newToken;
      saveToStorage();
    } catch (err: any) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", err);
      logout();
      throw err;
    }
  };

  const logout = () => {
    console.log("üö™ Axenta Cloud logout initiated...");
    
    user.value = null;
    token.value = null;
    company.value = null;
    error.value = null;
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    clearStorage();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    localStorage.removeItem("demo_token");
    localStorage.removeItem("demo_user");
    
    console.log("‚úÖ Axenta Cloud logout completed");
  };

  const clearError = () => {
    error.value = null;
  };

  const hasRole = (role: string): boolean => {
    if (!user.value) return false;
    // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ
    return user.value.isAdmin || false;
  };

  const hasPermission = (permission: string): boolean => {
    if (!user.value) return false;
    // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ
    return user.value.isAdmin || false;
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  let tokenCheckInterval: NodeJS.Timeout;

  const startTokenCheck = () => {
    tokenCheckInterval = setInterval(() => {
      if (token.value && isTokenExpired(token.value)) {
        refreshToken().catch(() => {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –≤—ã—Ö–æ–¥–∏–º
          logout();
        });
      }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
  };

  const stopTokenCheck = () => {
    if (tokenCheckInterval) {
      clearInterval(tokenCheckInterval);
    }
  };

  // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
  watch(token, (newToken) => {
    if (newToken) {
      startTokenCheck();
    } else {
      stopTokenCheck();
    }
  });

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º company ID
  const forceCleanOldData = () => {
    const storedCompany = localStorage.getItem(COMPANY_KEY);
    if (storedCompany) {
      try {
        const parsedCompany = JSON.parse(storedCompany);
        // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ID –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (—Å—Ç—Ä–æ–∫–∞ "1" –∏–ª–∏ —á–∏—Å–ª–æ 1)
        if (parsedCompany.id === "1" || parsedCompany.id === 1) {
          console.log("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º company ID, –æ–±–Ω–æ–≤–ª—è–µ–º");
          // –ù–µ –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∞ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º company
          company.value = demoCompany;
          localStorage.setItem(COMPANY_KEY, JSON.stringify(demoCompany));
        }
      } catch (err) {
        console.log("üîÑ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ company –¥–∞–Ω–Ω—ã—Ö:", err);
        // –ù–µ –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Ç–æ–ª—å–∫–æ company
        company.value = demoCompany;
        localStorage.setItem(COMPANY_KEY, JSON.stringify(demoCompany));
      }
    }
  };

  // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  loadFromStorage();

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)
  forceCleanOldData();

  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ localStorage, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
  const hasAnyStoredToken = localStorage.getItem("axenta_token") || 
                           localStorage.getItem("local_access_token") ||
                           localStorage.getItem("token");
                           
  if (!user.value && !token.value && !hasAnyStoredToken) {
    console.log("üîÑ No user or tokens found anywhere, setting demo data for development");
    user.value = demoUser;
    token.value = "demo-token-" + Date.now();
    company.value = demoCompany;
    saveToStorage();
  } else if (hasAnyStoredToken && !user.value) {
    console.log("üîÑ Found stored token but no user, attempting to restore...");
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –≤ localStorage, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
    loadFromStorage();
  }

  const authContext: AuthContext = {
    user,
    token,
    company,
    login,
    logout,
    refreshToken,
    isAuthenticated,
    isLoading,
    error,
    clearError,
    hasRole,
    hasPermission,
    apiClient,
  };

  provide(AuthKey, authContext);

  return authContext;
}

export function useAuth() {
  const auth = inject<AuthContext>(AuthKey);
  if (!auth) throw new Error("Auth context not provided");
  return auth;
}

export function provideAuth(authContext: AuthContext) {
  provide(AuthKey, authContext);
}
