/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π Axenta
 */

import { config } from "@/config/env";
import axios from "axios";

export interface Account {
  id: number;
  name: string;
  type: "client" | "partner";
  adminFullname: string;
  adminId: number;
  adminIsActive: boolean;
  parentAccountName: string;
  objectsActive: number;
  objectsTotal: number;
  objectsDeleted: number;
  comment: string | null;
  isActive: boolean;
  blockingDatetime: string | null;
  hierarchy: string;
  daysBeforeBlocking: number | null;
  creationDatetime: string;
}

export interface AccountsResponse {
  count: number;
  next: string | null;
  previous: string | null;
  results: Account[];
}

export interface AccountsFilters {
  page?: number;
  per_page?: number;
  ordering?: string;
  search?: string;
  type?: "client" | "partner";
  is_active?: boolean;
}

class AccountsService {
  private static instance: AccountsService;
  private apiClient = axios.create({
    baseURL: config.apiBaseUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –±—ç–∫–µ–Ω–¥ –∫–∞–∫ –ø—Ä–æ–∫—Å–∏
    timeout: 30000,
  });

  constructor() {
    // –î–æ–±–∞–≤–ª—è–µ–º interceptor –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    this.apiClient.interceptors.request.use((config) => {
      const token = localStorage.getItem("axenta_token");
      const company = localStorage.getItem("axenta_company");

      console.log("AccountsService API request:", {
        url: config.url,
        token: token ? "EXISTS" : "MISSING",
        company: company ? "EXISTS" : "MISSING",
      });

      if (token) {
        config.headers["authorization"] = `Token ${token}`;
        config.headers["Authorization"] = `Token ${token}`;
      }

      if (company) {
        try {
          const companyData = JSON.parse(company);
          config.headers["X-Tenant-ID"] = companyData.id;
        } catch (e) {
          console.warn("Invalid company data in localStorage");
        }
      }

      return config;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º interceptor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    this.apiClient.interceptors.response.use(
      (response) => response,
      (error) => {
        console.log("AccountsService API error:", {
          status: error.response?.status,
          url: error.config?.url,
          message: error.message,
        });

        if (error.response?.status === 401) {
          console.log("401 error - clearing auth and redirecting to login");
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          localStorage.removeItem("axenta_token");
          localStorage.removeItem("axenta_user");
          localStorage.removeItem("axenta_company");
          localStorage.removeItem("axenta_token_expiry");
          window.location.href = "/login";
        }
        return Promise.reject(error);
      }
    );
  }

  static getInstance(): AccountsService {
    if (!AccountsService.instance) {
      AccountsService.instance = new AccountsService();
    }
    return AccountsService.instance;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  async getAccounts(filters: AccountsFilters = {}): Promise<AccountsResponse> {
    try {
      const params = {
        page: filters.page || 1,
        per_page: filters.per_page || 50,
        ordering: filters.ordering || "name",
        ...filters,
      };

      console.log("üì° –ó–∞–ø—Ä–æ—Å —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:", params);

      const response = await this.apiClient.get<AccountsResponse>(
        "/auth/accounts/", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–æ–∫—Å–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç
        { params }
      );

      console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏:", {
        count: response.data.count,
        results: response.data.results.length,
        hasNext: !!response.data.next,
        totalFromAPI: response.data.count,
      });

      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ count –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
      if (!response.data.count || response.data.count === 0) {
        console.error("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π count:", response.data);
      }

      return response.data;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:", error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ ID
   */
  async getAccount(id: number): Promise<Account> {
    try {
      const response = await this.apiClient.get<Account>(
        `/auth/accounts/${id}/` // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–æ–∫—Å–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç
      );
      return response.data;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ ${id}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  async searchAccounts(query: string, filters: AccountsFilters = {}): Promise<AccountsResponse> {
    return this.getAccounts({
      ...filters,
      search: query,
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  async getAccountsStats(): Promise<{
    total: number;
    active: number;
    blocked: number;
    clients: number;
    partners: number;
  }> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const response = await this.getAccounts({ per_page: 1 });
      
      // –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const activeResponse = await this.getAccounts({ 
        per_page: 1, 
        is_active: true 
      });
      
      const clientsResponse = await this.getAccounts({ 
        per_page: 1, 
        type: "client" 
      });
      
      const partnersResponse = await this.getAccounts({ 
        per_page: 1, 
        type: "partner" 
      });

      return {
        total: response.count,
        active: activeResponse.count,
        blocked: response.count - activeResponse.count,
        clients: clientsResponse.count,
        partners: partnersResponse.count,
      };
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:", error);
      throw error;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const accountsService = AccountsService.getInstance();
export default accountsService;
