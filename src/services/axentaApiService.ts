/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º API Axenta Cloud
 * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤–Ω–µ—à–Ω–µ–≥–æ API –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É
 */

import axios, { type AxiosInstance } from 'axios';
import { config } from '@/config/env';

export interface AxentaAuthResponse {
  access: string;
  refresh: string;
}

export interface AxentaAccount {
  id: number;
  name: string;
  manager?: string;
  service_company?: string;
  objects_count: number;
  status: string;
  created_at?: string;
  updated_at?: string;
}

export interface AxentaAccountsResponse {
  results: AxentaAccount[];
  count: number;
  next?: string;
  previous?: string;
}

export class AxentaApiService {
  private apiClient: AxiosInstance;
  private token: string | null = null;

  constructor() {
    this.apiClient = axios.create({
      baseURL: config.backendUrl,
      timeout: config.apiTimeout,
      headers: {
        'Content-Type': 'application/json',
        // 'User-Agent': 'Axenta-CRM-Frontend/1.0' // –£–±—Ä–∞–Ω–æ - –±—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º interceptor –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    this.apiClient.interceptors.request.use((config) => {
      if (this.token) {
        config.headers['Authorization'] = `Bearer ${this.token}`;
      }
      return config;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º interceptor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    this.apiClient.interceptors.response.use(
      (response) => response,
      (error) => {
        console.error('Axenta API Error:', {
          status: error.response?.status,
          url: error.config?.url,
          data: error.response?.data
        });
        return Promise.reject(error);
      }
    );
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ API Axenta
   */
  async login(username: string, password: string): Promise<AxentaAuthResponse> {
    try {
      console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Axenta API...');
      
      const response = await this.apiClient.post<AxentaAuthResponse>(
        '/api/auth/login/',
        { username, password }
      );

      if (response.data.access) {
        this.token = response.data.access;
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Axenta API');
      }

      return response.data;
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Axenta API:', error);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      
      if (error.response?.data?.detail) {
        if (Array.isArray(error.response.data.detail)) {
          errorMessage = error.response.data.detail.join(', ');
        } else {
          errorMessage = error.response.data.detail;
        }
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.message) {
        errorMessage = error.message;
      }

      throw new Error(errorMessage);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
   */
  async getAccounts(page = 1, perPage = 50): Promise<AxentaAccountsResponse> {
    if (!this.token) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }

    try {
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ Axenta API...');
      
      const response = await this.apiClient.get<AxentaAccountsResponse>(
        '/api/cms/accounts/',
        {
          params: {
            page,
            per_page: perPage,
            ordering: 'name'
          }
        }
      );

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.results?.length || 0} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
   */
  async testConnection(): Promise<{ status: number; message: string }> {
    try {
      const response = await this.apiClient.get('/', {
        validateStatus: () => true // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å
      });

      return {
        status: response.status,
        message: `–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`
      };
    } catch (error: any) {
      return {
        status: 0,
        message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`
      };
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑–≤–Ω–µ
   */
  setToken(token: string) {
    this.token = token;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
   */
  getToken(): string | null {
    return this.token;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞
   */
  clearToken() {
    this.token = null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const axentaApiService = new AxentaApiService();
