import { ref, computed } from 'vue';
import { getObjectsService } from './objectsService';
import { dashboardService } from './dashboardService';
import { useAuth } from '@/context/auth';

interface RefreshConfig {
  enabled: boolean;
  interval: number; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  lastUpdate: Date | null;
  errorCount: number;
  maxErrors: number;
}

interface RefreshStats {
  totalRefreshes: number;
  successfulRefreshes: number;
  failedRefreshes: number;
  lastSuccessfulRefresh: Date | null;
  lastError: string | null;
}

class AxentaAutoRefreshService {
  private static instance: AxentaAutoRefreshService;
  
  private refreshTimer: NodeJS.Timeout | null = null;
  private config = ref<RefreshConfig>({
    enabled: false,
    interval: 30000, // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    lastUpdate: null,
    errorCount: 0,
    maxErrors: 5
  });
  
  private stats = ref<RefreshStats>({
    totalRefreshes: 0,
    successfulRefreshes: 0,
    failedRefreshes: 0,
    lastSuccessfulRefresh: null,
    lastError: null
  });
  
  private subscribers = new Set<() => void>();
  private auth: ReturnType<typeof useAuth> | null = null;

  static getInstance(): AxentaAutoRefreshService {
    if (!AxentaAutoRefreshService.instance) {
      AxentaAutoRefreshService.instance = new AxentaAutoRefreshService();
    }
    return AxentaAutoRefreshService.instance;
  }

  private constructor() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
    this.loadConfig();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ
    if (this.config.value.enabled) {
      this.start();
    }
  }

  // –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è auth –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  private getAuth() {
    if (!this.auth) {
      try {
        this.auth = useAuth();
      } catch (error) {
        console.warn('‚ö†Ô∏è Auth context –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ');
        return null;
      }
    }
    return this.auth;
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  get isEnabled() {
    return computed(() => this.config.value.enabled);
  }

  get interval() {
    return computed(() => this.config.value.interval);
  }

  get lastUpdate() {
    return computed(() => this.config.value.lastUpdate);
  }

  get refreshStats() {
    return computed(() => this.stats.value);
  }

  get nextRefreshIn() {
    return computed(() => {
      if (!this.config.value.enabled || !this.config.value.lastUpdate) {
        return null;
      }
      
      const nextRefresh = new Date(this.config.value.lastUpdate.getTime() + this.config.value.interval);
      const now = new Date();
      const diff = nextRefresh.getTime() - now.getTime();
      
      return diff > 0 ? Math.ceil(diff / 1000) : 0;
    });
  }

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  start() {
    if (this.refreshTimer) {
      this.stop();
    }

    this.config.value.enabled = true;
    this.config.value.errorCount = 0;
    this.saveConfig();

    console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Axenta –∫–∞–∂–¥—ã–µ', this.config.value.interval / 1000, '—Å–µ–∫—É–Ω–¥');

    this.refreshTimer = setInterval(() => {
      this.performRefresh();
    }, this.config.value.interval);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    this.performRefresh();
    
    this.notifySubscribers();
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  stop() {
    if (this.refreshTimer) {
      clearInterval(this.refreshTimer);
      this.refreshTimer = null;
    }

    this.config.value.enabled = false;
    this.saveConfig();

    console.log('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Axenta –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    this.notifySubscribers();
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  setInterval(intervalSeconds: number) {
    const intervalMs = intervalSeconds * 1000;
    
    if (intervalMs < 5000) { // –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
      throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 5 —Å–µ–∫—É–Ω–¥');
    }
    
    if (intervalMs > 300000) { // –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
      throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 5 –º–∏–Ω—É—Ç');
    }

    this.config.value.interval = intervalMs;
    this.saveConfig();

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º, –µ—Å–ª–∏ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ
    if (this.config.value.enabled) {
      this.start();
    }

    console.log('‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞', intervalSeconds, '—Å–µ–∫—É–Ω–¥');
    
    this.notifySubscribers();
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  async forceRefresh(): Promise<boolean> {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Axenta');
    return await this.performRefresh();
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  private async performRefresh(): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const auth = this.getAuth();
      if (!auth || !auth.isAuthenticated.value) {
        console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ auth –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        return false;
      }

      this.stats.value.totalRefreshes++;
      this.config.value.lastUpdate = new Date();

      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Axenta...');

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–æ–≤
      await this.refreshObjectsData();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—à–±–æ—Ä–¥–∞
      await this.refreshDashboardData();

      // –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      this.stats.value.successfulRefreshes++;
      this.stats.value.lastSuccessfulRefresh = new Date();
      this.stats.value.lastError = null;
      this.config.value.errorCount = 0;

      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ Axenta —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      
      this.saveConfig();
      this.notifySubscribers();
      
      return true;

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Axenta:', error);
      
      this.stats.value.failedRefreshes++;
      this.stats.value.lastError = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      this.config.value.errorCount++;

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –æ—à–∏–±–æ–∫
      if (this.config.value.errorCount >= this.config.value.maxErrors) {
        console.error('üõë –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ—à–∏–±–æ–∫, –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.stop();
      }

      this.saveConfig();
      this.notifySubscribers();
      
      return false;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
  private async refreshObjectsData() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ
      const savedFilters = localStorage.getItem('objects_filters');
      const filters = savedFilters ? JSON.parse(savedFilters) : {};
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
      const objectsService = getObjectsService();
      await objectsService.getObjects(1, 50, filters);
      
      console.log('üìã –î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:', error);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
  private async refreshDashboardData() {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—à–±–æ—Ä–¥–∞
      await dashboardService.getStats();
      
      console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
      throw error;
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  subscribe(callback: () => void) {
    this.subscribers.add(callback);
    
    return () => {
      this.subscribers.delete(callback);
    };
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  private notifySubscribers() {
    this.subscribers.forEach(callback => {
      try {
        callback();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      }
    });
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  private saveConfig() {
    try {
      const configToSave = {
        enabled: this.config.value.enabled,
        interval: this.config.value.interval,
        lastUpdate: this.config.value.lastUpdate?.toISOString(),
        errorCount: this.config.value.errorCount,
        maxErrors: this.config.value.maxErrors
      };
      
      localStorage.setItem('axenta_auto_refresh_config', JSON.stringify(configToSave));
      
      const statsToSave = {
        ...this.stats.value,
        lastSuccessfulRefresh: this.stats.value.lastSuccessfulRefresh?.toISOString()
      };
      
      localStorage.setItem('axenta_auto_refresh_stats', JSON.stringify(statsToSave));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  private loadConfig() {
    try {
      const savedConfig = localStorage.getItem('axenta_auto_refresh_config');
      if (savedConfig) {
        const config = JSON.parse(savedConfig);
        this.config.value = {
          ...this.config.value,
          ...config,
          lastUpdate: config.lastUpdate ? new Date(config.lastUpdate) : null
        };
      }

      const savedStats = localStorage.getItem('axenta_auto_refresh_stats');
      if (savedStats) {
        const stats = JSON.parse(savedStats);
        this.stats.value = {
          ...this.stats.value,
          ...stats,
          lastSuccessfulRefresh: stats.lastSuccessfulRefresh ? new Date(stats.lastSuccessfulRefresh) : null
        };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    }
  }

  // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  resetStats() {
    this.stats.value = {
      totalRefreshes: 0,
      successfulRefreshes: 0,
      failedRefreshes: 0,
      lastSuccessfulRefresh: null,
      lastError: null
    };
    
    this.saveConfig();
    this.notifySubscribers();
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω–∞');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  getStatus() {
    return {
      enabled: this.config.value.enabled,
      interval: this.config.value.interval,
      lastUpdate: this.config.value.lastUpdate,
      nextRefreshIn: this.nextRefreshIn.value,
      stats: this.stats.value,
      errorCount: this.config.value.errorCount,
      maxErrors: this.config.value.maxErrors
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è singleton instance (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
export const getAxentaAutoRefreshService = () => AxentaAutoRefreshService.getInstance();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º composable –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export function useAxentaAutoRefresh() {
  const service = getAxentaAutoRefreshService();
  
  return {
    isEnabled: service.isEnabled,
    interval: service.interval,
    lastUpdate: service.lastUpdate,
    nextRefreshIn: service.nextRefreshIn,
    refreshStats: service.refreshStats,
    
    start: () => service.start(),
    stop: () => service.stop(),
    setInterval: (seconds: number) => service.setInterval(seconds),
    forceRefresh: () => service.forceRefresh(),
    resetStats: () => service.resetStats(),
    getStatus: () => service.getStatus(),
    subscribe: (callback: () => void) => service.subscribe(callback)
  };
}
