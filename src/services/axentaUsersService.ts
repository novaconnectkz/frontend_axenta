// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Axenta

import { config } from "@/config/env";
import type {
  AxentaUsersResponse,
  AxentaUsersStats,
  AxentaUsersStatsResponse,
  LocalUserForm,
  SyncAxentaUserForm,
  UpdateAxentaRoleForm,
  UserWithRelations,
} from "@/types/users";
import axios from "axios";

export class AxentaUsersService {
  private static instance: AxentaUsersService;
  private useMockData = false; // –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
  private apiClient = axios.create({
    baseURL: config.apiBaseUrl,
    timeout: 30000,
  });

  constructor() {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º interceptors –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    this.apiClient.interceptors.request.use((config) => {
      const token = localStorage.getItem("axenta_token");
      const company = localStorage.getItem("axenta_company");

      if (token) {
        config.headers["authorization"] = `Token ${token}`;
        config.headers["Authorization"] = `Token ${token}`;
      }

      if (company) {
        try {
          const companyData = JSON.parse(company);
          config.headers["X-Tenant-ID"] = companyData.id;
        } catch (e) {
          console.warn("Invalid company data in localStorage");
        }
      }

      console.log("üì° AxentaUsersService request:", {
        url: config.url,
        method: config.method,
        hasToken: !!token,
        tenantId: config.headers["X-Tenant-ID"] || "none",
      });

      return config;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    this.apiClient.interceptors.response.use(
      (response) => response,
      (error) => {
        console.error("‚ùå AxentaUsersService error:", {
          url: error.config?.url,
          status: error.response?.status,
          message: error.response?.data?.error || error.message,
        });

        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ
        if (error.response?.status === 401) {
          console.warn("üîÑ Switching to mock data due to authentication error");
          this.enableMockData();
        }

        return Promise.reject(error);
      }
    );
  }

  static getInstance(): AxentaUsersService {
    if (!AxentaUsersService.instance) {
      AxentaUsersService.instance = new AxentaUsersService();
    }
    return AxentaUsersService.instance;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
  enableMockData(): void {
    this.useMockData = true;
    console.log("–†–µ–∂–∏–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–µ–Ω –¥–ª—è AxentaUsersService");
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
  disableMockData(): void {
    this.useMockData = false;
    console.log("–†–µ–∂–∏–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è AxentaUsersService");
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∂–∏–º–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
  isMockDataEnabled(): boolean {
    return this.useMockData;
  }

  // === –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô AXENTA ===

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø—É (partner, client, local, all)
  async getAxentaUsers(type: "partner" | "client" | "local" | "all" = "all"): Promise<AxentaUsersResponse> {
    if (this.useMockData) {
      return this.getMockAxentaUsers(type);
    }

    try {
      const response = await this.apiClient.get(`/auth/axenta-users?type=${type}`);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Axenta:", error);
      return {
        status: "error",
        data: [],
        count: 0,
        type,
        error: error.response?.data?.error || error.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Axenta",
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø–∞–º Axenta
  async getAxentaUsersStats(): Promise<AxentaUsersStatsResponse> {
    if (this.useMockData) {
      return this.getMockAxentaUsersStats();
    }

    try {
      const response = await this.apiClient.get("/auth/axenta-users/stats");
      return response.data;
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Axenta:", error);
      return {
        status: "error",
        data: {
          partners: { count: 0, users: [] },
          clients: { count: 0, users: [] },
          local: { count: 0, users: [] },
          total: 0,
        },
        error: error.response?.data?.error || error.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
      };
    }
  }

  // === –°–û–ó–î–ê–ù–ò–ï –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async checkUsername(username: string): Promise<{
    status: string;
    data?: {
      available: boolean;
      message: string;
      source?: string;
    };
    error?: string;
  }> {
    if (this.useMockData) {
      // –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      return {
        status: "success",
        data: {
          available: username !== "admin" && username !== "test",
          message: username !== "admin" && username !== "test" 
            ? "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ" 
            : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
          source: username === "admin" ? "crm" : undefined,
        },
      };
    }

    try {
      const response = await this.apiClient.post("/auth/local/users/check-username", {
        username,
      });
      return response.data;
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return {
        status: "error",
        error: error.response?.data?.error || error.message || "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      };
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createLocalUser(user: LocalUserForm): Promise<{
    status: string;
    data?: UserWithRelations;
    error?: string;
  }> {
    if (this.useMockData) {
      return this.getMockCreateLocalUser(user);
    }

    try {
      const response = await this.apiClient.post("/auth/axenta-users/local", user);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return {
        status: "error",
        error: error.response?.data?.error || error.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ Axenta –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateUserAxentaRole(userId: number, roleData: UpdateAxentaRoleForm): Promise<{
    status: string;
    data?: UserWithRelations;
    error?: string;
  }> {
    if (this.useMockData) {
      return this.getMockUpdateUserAxentaRole(userId, roleData);
    }

    try {
      const response = await this.apiClient.put(`/auth/axenta-users/${userId}/role`, roleData);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ Axenta –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      return {
        status: "error",
        error: error.response?.data?.error || error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏",
      };
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Axenta
  async syncUserWithAxenta(syncData: SyncAxentaUserForm): Promise<{
    status: string;
    data?: UserWithRelations;
    error?: string;
  }> {
    if (this.useMockData) {
      return this.getMockSyncUserWithAxenta(syncData);
    }

    try {
      const response = await this.apiClient.post("/auth/axenta-users/sync", syncData);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Axenta:", error);
      return {
        status: "error",
        error: error.response?.data?.error || error.message || "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
      };
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  async ensureAxentaRoles(): Promise<{
    status: string;
    message?: string;
    error?: string;
  }> {
    if (this.useMockData) {
      return {
        status: "success",
        message: "–†–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω—ã (–¥–µ–º–æ —Ä–µ–∂–∏–º)",
      };
    }

    try {
      const response = await this.apiClient.post("/auth/axenta-users/ensure-roles");
      return response.data;
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", error);
      return {
        status: "error",
        error: error.response?.data?.error || error.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π",
      };
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Axenta
  async syncAllAxentaUsers(): Promise<{
    status: string;
    message?: string;
    data?: {
      total_users: number;
      synced_count: number;
      error_count: number;
      errors: string[];
    };
    error?: string;
  }> {
    if (this.useMockData) {
      return {
        status: "success",
        message: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: 3 —É—Å–ø–µ—à–Ω–æ, 0 –æ—à–∏–±–æ–∫ (–¥–µ–º–æ —Ä–µ–∂–∏–º)",
        data: {
          total_users: 3,
          synced_count: 3,
          error_count: 0,
          errors: [],
        },
      };
    }

    try {
      const response = await this.apiClient.post("/auth/axenta-users/sync-all");
      return response.data;
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
      return {
        status: "error",
        error: error.response?.data?.error || error.message || "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async getSyncedUsers(
    page = 1,
    limit = 20,
    filters: {
      axenta_type?: string;
      is_axenta_user?: boolean;
      search?: string;
    } = {}
  ): Promise<{
    status: string;
    data?: {
      items: UserWithRelations[];
      total: number;
      page: number;
      limit: number;
      pages: number;
    };
    error?: string;
  }> {
    if (this.useMockData) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const mockData = this.getMockAxentaUsers("all");
      return {
        status: "success",
        data: {
          items: mockData.data,
          total: mockData.count,
          page,
          limit,
          pages: Math.ceil(mockData.count / limit),
        },
      };
    }

    try {
      const params = new URLSearchParams({
        page: page.toString(),
        limit: limit.toString(),
      });

      if (filters.axenta_type) params.append("axenta_type", filters.axenta_type);
      if (filters.is_axenta_user !== undefined) {
        params.append("is_axenta_user", filters.is_axenta_user.toString());
      }
      if (filters.search) params.append("search", filters.search);

      const response = await this.apiClient.get(`/auth/users/synced?${params.toString()}`);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
      return {
        status: "error",
        error: error.response?.data?.error || error.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      };
    }
  }

  // === MOCK DATA METHODS ===

  private getMockAxentaUsers(type: string): AxentaUsersResponse {
    const mockUsers: UserWithRelations[] = [
      {
        id: 1,
        username: "partner_user1",
        email: "partner1@example.com",
        first_name: "–ü–∞—Ä—Ç–Ω–µ—Ä",
        last_name: "–û–¥–∏–Ω",
        is_active: true,
        user_type: "partner",
        role_id: 1,
        login_count: 15,
        created_at: "2024-01-15T10:00:00Z",
        updated_at: "2024-01-20T15:30:00Z",
        axenta_user_type: "partner",
        axenta_user_id: "123",
        is_axenta_user: true,
        external_source: "axenta",
        role: {
          id: 1,
          name: "partner",
          display_name: "–ü–∞—Ä—Ç–Ω–µ—Ä",
          description: "–†–æ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑ Axenta",
          color: "#2196F3",
          priority: 100,
          is_active: true,
          is_system: true,
          created_at: "2024-01-01T00:00:00Z",
          updated_at: "2024-01-01T00:00:00Z",
        },
      },
      {
        id: 2,
        username: "client_user1",
        email: "client1@example.com",
        first_name: "–ö–ª–∏–µ–Ω—Ç",
        last_name: "–ü–µ—Ä–≤—ã–π",
        is_active: true,
        user_type: "client",
        role_id: 2,
        login_count: 8,
        created_at: "2024-01-16T11:00:00Z",
        updated_at: "2024-01-21T16:30:00Z",
        axenta_user_type: "client",
        axenta_user_id: "456",
        is_axenta_user: true,
        external_source: "axenta",
        role: {
          id: 2,
          name: "client",
          display_name: "–ö–ª–∏–µ–Ω—Ç",
          description: "–†–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Axenta",
          color: "#4CAF50",
          priority: 50,
          is_active: true,
          is_system: true,
          created_at: "2024-01-01T00:00:00Z",
          updated_at: "2024-01-01T00:00:00Z",
        },
      },
      {
        id: 3,
        username: "local_user1",
        email: "local1@example.com",
        first_name: "–õ–æ–∫–∞–ª—å–Ω—ã–π",
        last_name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        is_active: true,
        user_type: "user",
        role_id: 3,
        login_count: 25,
        created_at: "2024-01-10T09:00:00Z",
        updated_at: "2024-01-22T14:15:00Z",
        axenta_user_type: "local",
        is_axenta_user: false,
        role: {
          id: 3,
          name: "user",
          display_name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
          description: "–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã",
          color: "#FF9800",
          priority: 25,
          is_active: true,
          is_system: true,
          created_at: "2024-01-01T00:00:00Z",
          updated_at: "2024-01-01T00:00:00Z",
        },
      },
    ];

    let filteredUsers = mockUsers;
    if (type !== "all") {
      if (type === "local") {
        filteredUsers = mockUsers.filter(u => !u.is_axenta_user || u.axenta_user_type === "local");
      } else {
        filteredUsers = mockUsers.filter(u => u.axenta_user_type === type);
      }
    }

    return {
      status: "success",
      data: filteredUsers,
      count: filteredUsers.length,
      type,
    };
  }

  private getMockAxentaUsersStats(): AxentaUsersStatsResponse {
    const mockData = this.getMockAxentaUsers("all");
    const users = mockData.data;

    const partners = users.filter(u => u.axenta_user_type === "partner");
    const clients = users.filter(u => u.axenta_user_type === "client");
    const local = users.filter(u => !u.is_axenta_user || u.axenta_user_type === "local");

    return {
      status: "success",
      data: {
        partners: { count: partners.length, users: partners },
        clients: { count: clients.length, users: clients },
        local: { count: local.length, users: local },
        total: users.length,
      },
    };
  }

  private getMockCreateLocalUser(user: LocalUserForm): Promise<{
    status: string;
    data?: UserWithRelations;
    error?: string;
  }> {
    return Promise.resolve({
      status: "success",
      data: {
        id: Date.now(),
        username: user.username,
        email: user.email,
        first_name: user.first_name,
        last_name: user.last_name,
        phone: user.phone,
        is_active: true,
        user_type: "user",
        role_id: user.role_id,
        login_count: 0,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        axenta_user_type: "local",
        is_axenta_user: false,
        role: {
          id: user.role_id,
          name: "user",
          display_name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
          description: "–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã",
          color: "#FF9800",
          priority: 25,
          is_active: true,
          is_system: true,
          created_at: "2024-01-01T00:00:00Z",
          updated_at: "2024-01-01T00:00:00Z",
        },
      },
    });
  }

  private getMockUpdateUserAxentaRole(userId: number, roleData: UpdateAxentaRoleForm): Promise<{
    status: string;
    data?: UserWithRelations;
    error?: string;
  }> {
    return Promise.resolve({
      status: "success",
      data: {
        id: userId,
        username: `user_${userId}`,
        email: `user${userId}@example.com`,
        first_name: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π",
        last_name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        is_active: true,
        user_type: roleData.axenta_user_type === "local" ? "user" : roleData.axenta_user_type,
        role_id: 1,
        login_count: 5,
        created_at: "2024-01-01T00:00:00Z",
        updated_at: new Date().toISOString(),
        axenta_user_type: roleData.axenta_user_type,
        axenta_user_id: roleData.axenta_user_id,
        is_axenta_user: roleData.is_axenta_user,
        external_source: roleData.is_axenta_user ? "axenta" : undefined,
      },
    });
  }

  private getMockSyncUserWithAxenta(syncData: SyncAxentaUserForm): Promise<{
    status: string;
    data?: UserWithRelations;
    error?: string;
  }> {
    return Promise.resolve({
      status: "success",
      data: {
        id: Date.now(),
        username: syncData.username,
        email: `${syncData.username}@axenta.example.com`,
        first_name: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
        last_name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        is_active: true,
        user_type: "partner",
        role_id: 1,
        login_count: 1,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        axenta_user_type: "partner",
        axenta_user_id: "sync_" + Date.now(),
        is_axenta_user: true,
        external_source: "axenta",
        role: {
          id: 1,
          name: "partner",
          display_name: "–ü–∞—Ä—Ç–Ω–µ—Ä",
          description: "–†–æ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑ Axenta",
          color: "#2196F3",
          priority: 100,
          is_active: true,
          is_system: true,
          created_at: "2024-01-01T00:00:00Z",
          updated_at: "2024-01-01T00:00:00Z",
        },
      },
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const axentaUsersService = AxentaUsersService.getInstance();
export default axentaUsersService;
