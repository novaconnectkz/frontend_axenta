// import { useAuth } from "@/context/auth"; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º
import { config } from "@/config/env";
import type {
  ActivityItem,
  ChartData,
  DashboardLayout,
  DashboardStats,
  NotificationItem,
} from "@/types/dashboard";
import axios from "axios";
import { ObjectsService } from "./objectsService";
import { usersService } from "./usersService";
import {
  getMockWidgetData,
  mockChartData,
  mockDashboardLayouts,
  mockDashboardStats,
  mockNotifications,
  mockRecentActivity,
  simulateDelay,
} from "./mockDashboardData";

class DashboardService {
  // private auth = useAuth(); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º

  // –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è mock-–¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–µ–Ω)
  private useMockData = true;
  
  // –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
  private useRealObjectsData = true;
  
  // –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  private useRealUsersData = true;

  // –ü—Ä–æ—Å—Ç–æ–π API –∫–ª–∏–µ–Ω—Ç –±–µ–∑ auth –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  private get apiClient() {
    const token = localStorage.getItem("axenta_token");
    return axios.create({
      baseURL: config.apiBaseUrl,
      timeout: config.apiTimeout,
      headers: {
        "Content-Type": "application/json",
        ...(token && { authorization: `Token ${token}` }),
      },
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è Dashboard
  async getStats(): Promise<DashboardStats> {
    // –ï—Å–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑—É–µ–º mock-–¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
    if (this.useMockData && !this.useRealObjectsData && !this.useRealUsersData) {
      await simulateDelay(100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
      return mockDashboardStats;
    }

    try {
      let objectsStats;
      let usersStats;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö
      if (this.useRealObjectsData) {
        console.log("üìä Loading real objects data...");
        const objectsService = ObjectsService.getInstance();
        const realObjectsStats = await objectsService.getObjectsStats();
        console.log("üìä Real objects stats:", realObjectsStats);
        
        objectsStats = {
          total: realObjectsStats.total,
          active: realObjectsStats.active,
          inactive: realObjectsStats.inactive,
          scheduled_for_deletion: realObjectsStats.scheduled_for_delete,
          deleted: realObjectsStats.deleted
        };
      } else {
        objectsStats = mockDashboardStats.objects;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      if (this.useRealUsersData) {
        console.log("üìä Loading real users data...");
        const realUsersStats = await usersService.getUsersStats();
        console.log("üìä Real users stats:", realUsersStats);
        
        usersStats = {
          total: realUsersStats.total,
          active: realUsersStats.active,
          inactive: realUsersStats.inactive,
          admins: realUsersStats.admins,
          regular_users: realUsersStats.regular_users
        };
      } else {
        usersStats = mockDashboardStats.users;
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const dashboardStats: DashboardStats = {
        objects: objectsStats,
        users: usersStats,
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
        billing: mockDashboardStats.billing,
        installations: mockDashboardStats.installations,
        warehouse: mockDashboardStats.warehouse
      };
      
      return dashboardStats;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
      console.warn("üîÑ Fallback to mock data for dashboard stats");
      return mockDashboardStats;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  async getRecentActivity(limit: number = 10): Promise<ActivityItem[]> {
    if (this.useMockData) {
      await simulateDelay(50);
      return mockRecentActivity.slice(0, limit);
    }

    try {
      const response = await this.apiClient.get(
        `/dashboard/activity?limit=${limit}`
      );
      return response.data.data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async getNotifications(
    limit: number = 5,
    unreadOnly: boolean = false
  ): Promise<NotificationItem[]> {
    if (this.useMockData) {
      await simulateDelay(30);
      let notifications = mockNotifications;
      if (unreadOnly) {
        notifications = notifications.filter((n) => !n.read);
      }
      return notifications.slice(0, limit);
    }

    try {
      const params = new URLSearchParams({
        limit: limit.toString(),
        ...(unreadOnly && { unread_only: "true" }),
      });

      const response = await this.apiClient.get(`/notifications?${params}`);
      return response.data.data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
      throw error;
    }
  }

  // –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  async markNotificationAsRead(notificationId: string): Promise<void> {
    if (this.useMockData) {
      await simulateDelay(20);
      // –í mock —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
      return;
    }

    try {
      await this.apiClient.put(`/notifications/${notificationId}/read`);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  async getChartData(
    type: string,
    range: string = "month"
  ): Promise<ChartData> {
    if (this.useMockData) {
      await simulateDelay(50);
      const chartKey = `${type}-${range}`;
      return mockChartData[chartKey] || mockChartData["objects-monthly"];
    }

    try {
      const response = await this.apiClient.get(
        `/dashboard/charts/${type}?range=${range}`
      );
      return response.data.data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞:", error);
      throw error;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Dashboard
  async saveLayout(layout: DashboardLayout): Promise<DashboardLayout> {
    if (this.useMockData) {
      await simulateDelay(100);
      // –í mock —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫–µ—Ç —Å ID –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const savedLayout = {
        ...layout,
        id: layout.id || `layout-${Date.now()}`,
      };
      return savedLayout;
    }

    try {
      if (layout.id) {
        const response = await this.apiClient.put(
          `/dashboard/layouts/${layout.id}`,
          layout
        );
        return response.data.data;
      } else {
        const response = await this.apiClient.post(
          "/dashboard/layouts",
          layout
        );
        return response.data.data;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–∫–µ—Ç–∞:", error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞–∫–µ—Ç–æ–≤
  async getLayouts(): Promise<DashboardLayout[]> {
    if (this.useMockData) {
      await simulateDelay(30);
      return mockDashboardLayouts;
    }

    try {
      const response = await this.apiClient.get("/dashboard/layouts");
      return response.data.data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫–µ—Ç–æ–≤:", error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  async getDefaultLayout(): Promise<DashboardLayout | null> {
    if (this.useMockData) {
      await simulateDelay(20);
      return (
        mockDashboardLayouts.find((layout) => layout.isDefault) ||
        mockDashboardLayouts[0] ||
        null
      );
    }

    try {
      const response = await this.apiClient.get("/dashboard/layouts/default");
      return response.data.data;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", error);
      return null;
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  async setDefaultLayout(layoutId: string): Promise<void> {
    if (this.useMockData) {
      await simulateDelay(50);
      // –í mock —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
      return;
    }

    try {
      await this.apiClient.put(`/dashboard/layouts/${layoutId}/default`);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–∫–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", error);
      throw error;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–∫–µ—Ç–∞
  async deleteLayout(layoutId: string): Promise<void> {
    if (this.useMockData) {
      await simulateDelay(50);
      // –í mock —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
      return;
    }

    try {
      await this.apiClient.delete(`/dashboard/layouts/${layoutId}`);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–∫–µ—Ç–∞:", error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
  async getWidgetData(widgetType: string, config: any = {}): Promise<any> {
    if (this.useMockData) {
      await simulateDelay(50);
      return getMockWidgetData(widgetType, config);
    }

    try {
      const response = await this.apiClient.post(
        `/dashboard/widgets/${widgetType}/data`,
        config
      );
      return response.data.data;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–∞ ${widgetType}:`, error);
      throw error;
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ mock-–¥–∞–Ω–Ω—ã—Ö
  setMockMode(enabled: boolean): void {
    this.useMockData = enabled;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è mock-—Ä–µ–∂–∏–º–∞
  isMockMode(): boolean {
    return this.useMockData;
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
  setRealObjectsDataMode(enabled: boolean): void {
    this.useRealObjectsData = enabled;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
  isRealObjectsDataMode(): boolean {
    return this.useRealObjectsData;
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  setRealUsersDataMode(enabled: boolean): void {
    this.useRealUsersData = enabled;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  isRealUsersDataMode(): boolean {
    return this.useRealUsersData;
  }
}

export const dashboardService = new DashboardService();
