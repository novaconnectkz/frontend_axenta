// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

/**
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ localStorage
 */
export function clearAllAuthData(): void {
  console.log('üßπ Clearing all auth data from localStorage...');
  
  // Axenta Cloud –¥–∞–Ω–Ω—ã–µ
  const axentaKeys = [
    'axenta_token',
    'axenta_user', 
    'axenta_company',
    'axenta_token_expiry',
    'token',  // –°—Ç–∞—Ä—ã–π –∫–ª—é—á
    'user',   // –°—Ç–∞—Ä—ã–π –∫–ª—é—á
  ];
  
  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const localKeys = [
    'local_access_token',
    'local_refresh_token',
    'local_user',
  ];
  
  // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
  const demoKeys = [
    'demo_token',
    'demo_user',
    'demo_company',
  ];
  
  // –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
  const otherKeys = [
    'auth_token',
    'auth_user',
    'current_user',
    'jwt_token',
    'bearer_token',
  ];
  
  const allKeys = [...axentaKeys, ...localKeys, ...demoKeys, ...otherKeys];
  
  let clearedCount = 0;
  allKeys.forEach(key => {
    if (localStorage.getItem(key)) {
      localStorage.removeItem(key);
      clearedCount++;
      console.log(`  ‚ùå Removed: ${key}`);
    }
  });
  
  console.log(`‚úÖ Cleared ${clearedCount} auth-related items from localStorage`);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º sessionStorage
  allKeys.forEach(key => {
    if (sessionStorage.getItem(key)) {
      sessionStorage.removeItem(key);
      console.log(`  ‚ùå Removed from session: ${key}`);
    }
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
 */
export function verifyAuthCleared(): boolean {
  const remainingKeys = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏
  const keysToCheck = [
    'axenta_token',
    'axenta_user',
    'local_access_token', 
    'local_user',
    'token',
    'user'
  ];
  
  keysToCheck.forEach(key => {
    if (localStorage.getItem(key)) {
      remainingKeys.push(key);
    }
  });
  
  if (remainingKeys.length > 0) {
    console.warn('‚ö†Ô∏è Some auth data still remains:', remainingKeys);
    return false;
  }
  
  console.log('‚úÖ All auth data successfully cleared');
  return true;
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 */
export function forceLogout(): void {
  console.log('üö® Force logout initiated...');
  
  // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  clearAllAuthData();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const isCleared = verifyAuthCleared();
  
  if (!isCleared) {
    console.warn('‚ö†Ô∏è Force clearing remaining items...');
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ localStorage
    const allKeys = Object.keys(localStorage);
    allKeys.forEach(key => {
      if (key.includes('token') || key.includes('user') || key.includes('auth') || key.includes('axenta')) {
        localStorage.removeItem(key);
        console.log(`  üî• Force removed: ${key}`);
      }
    });
  }
  
  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  console.log('üîÑ Reloading page to reset state...');
  window.location.href = '/login';
}
