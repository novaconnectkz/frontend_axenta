// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

export interface AuthInitResult {
  hasAxentaAuth: boolean;
  hasLocalAuth: boolean;
  shouldRedirectToLogin: boolean;
  authType: 'axenta' | 'local' | 'none';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export function checkAuthState(): AuthInitResult {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Axenta Cloud —Ç–æ–∫–µ–Ω
  const axentaToken = localStorage.getItem('axenta_token');
  const axentaUser = localStorage.getItem('axenta_user');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
  const localToken = localStorage.getItem('local_access_token');
  const localUser = localStorage.getItem('local_user');
  
  const hasAxentaAuth = !!(axentaToken && axentaUser);
  const hasLocalAuth = !!(localToken && localUser);
  
  let authType: 'axenta' | 'local' | 'none' = 'none';
  
  if (hasAxentaAuth) {
    authType = 'axenta';
  } else if (hasLocalAuth) {
    authType = 'local';
  }
  
  console.log('üîç Auth state check:', {
    axentaToken: axentaToken ? 'EXISTS' : 'MISSING',
    axentaUser: axentaUser ? 'EXISTS' : 'MISSING',
    localToken: localToken ? 'EXISTS' : 'MISSING',
    localUser: localUser ? 'EXISTS' : 'MISSING',
    hasAxentaAuth,
    hasLocalAuth,
    authType
  });
  
  return {
    hasAxentaAuth,
    hasLocalAuth,
    shouldRedirectToLogin: !hasAxentaAuth && !hasLocalAuth,
    authType
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞
 */
export function isJWTTokenValid(token: string): boolean {
  if (!token) return false;
  
  try {
    const parts = token.split('.');
    if (parts.length !== 3) return true; // –ù–µ JWT —Ç–æ–∫–µ–Ω, —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
    
    const payload = JSON.parse(atob(parts[1]));
    if (!payload.exp) return true; // –ù–µ—Ç —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è, —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
    
    return Date.now() < payload.exp * 1000;
  } catch (error) {
    console.error('Error checking JWT validity:', error);
    return false;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ localStorage
 */
export function cleanupInvalidTokens(): void {
  const axentaToken = localStorage.getItem('axenta_token');
  const localToken = localStorage.getItem('local_access_token');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Axenta —Ç–æ–∫–µ–Ω (–µ—Å–ª–∏ —ç—Ç–æ JWT)
  if (axentaToken && !isJWTTokenValid(axentaToken)) {
    console.log('üßπ Removing invalid Axenta token');
    localStorage.removeItem('axenta_token');
    localStorage.removeItem('axenta_user');
    localStorage.removeItem('axenta_company');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
  if (localToken && !isJWTTokenValid(localToken)) {
    console.log('üßπ Removing invalid local token');
    localStorage.removeItem('local_access_token');
    localStorage.removeItem('local_user');
  }
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ localStorage –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export function debugAuthStorage(): void {
  console.log('üîç Current localStorage auth state:');
  console.log('  axenta_token:', localStorage.getItem('axenta_token') ? 'EXISTS' : 'MISSING');
  console.log('  axenta_user:', localStorage.getItem('axenta_user') ? 'EXISTS' : 'MISSING');
  console.log('  axenta_company:', localStorage.getItem('axenta_company') ? 'EXISTS' : 'MISSING');
  console.log('  local_access_token:', localStorage.getItem('local_access_token') ? 'EXISTS' : 'MISSING');
  console.log('  local_refresh_token:', localStorage.getItem('local_refresh_token') ? 'EXISTS' : 'MISSING');
  console.log('  local_user:', localStorage.getItem('local_user') ? 'EXISTS' : 'MISSING');
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ localStorage
 */
export function restoreAuthState(): AuthInitResult {
  console.log('üîÑ Restoring auth state from localStorage...');
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  debugAuthStorage();
  
  // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
  cleanupInvalidTokens();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
  const result = checkAuthState();
  
  console.log('‚úÖ Auth state restored:', result);
  
  return result;
}
