/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Axenta
 * –í–∫–ª—é—á–∞–µ—Ç retry –º–µ—Ö–∞–Ω–∏–∑–º –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
 */

import axios, { AxiosError } from 'axios';

export interface ApiTestResult {
  success: boolean;
  status: number;
  message: string;
  data?: any;
  error?: string;
  timing?: number;
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API Axenta —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
 */
export async function testAxentaConnection(retries = 3, delay = 1000): Promise<ApiTestResult> {
  for (let attempt = 1; attempt <= retries; attempt++) {
    const startTime = Date.now();
    
    try {
      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Axenta...`);
      
      const response = await axios.get('https://axenta.cloud', {
        timeout: 10000,
        validateStatus: () => true
      });
      
      const timing = Date.now() - startTime;
      
      if (response.status === 200) {
        return {
          success: true,
          status: response.status,
          message: `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (${timing}ms)`,
          timing
        };
      } else {
        return {
          success: false,
          status: response.status,
          message: `–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`,
          timing
        };
      }
      
    } catch (error: any) {
      const timing = Date.now() - startTime;
      
      if (attempt === retries) {
        return {
          success: false,
          status: 0,
          message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫`,
          error: error.message,
          timing
        };
      }
      
      console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  return {
    success: false,
    status: 0,
    message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞'
  };
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
 */
export async function testAxentaAuth(username: string, password: string, retries = 3, delay = 2000): Promise<ApiTestResult> {
  for (let attempt = 1; attempt <= retries; attempt++) {
    const startTime = Date.now();
    
    try {
      console.log(`üîê –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...`);
      
      const response = await axios.post(
        'https://axenta.cloud/api/auth/login/',
        { username, password },
        {
          timeout: 15000,
          validateStatus: () => true,
          headers: {
            'Content-Type': 'application/json',
            // 'User-Agent': 'Axenta-CRM-Frontend/1.0', // –£–±—Ä–∞–Ω–æ - –±—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç
            'Accept': 'application/json',
            // 'Cache-Control': 'no-cache' // –£–±—Ä–∞–Ω–æ - CORS –±–ª–æ–∫–∏—Ä—É–µ—Ç
          }
        }
      );
      
      const timing = Date.now() - startTime;
      
      if (response.status === 200) {
        return {
          success: true,
          status: response.status,
          message: `–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (${timing}ms)`,
          data: response.data,
          timing
        };
      } else if (response.status === 400) {
        return {
          success: false,
          status: response.status,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
          data: response.data,
          timing
        };
      } else if (response.status === 502) {
        if (attempt === retries) {
          return {
            success: false,
            status: response.status,
            message: `–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (502) –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫`,
            timing
          };
        }
        
        console.log(`‚ùå –ü–æ–ª—É—á–µ–Ω 502, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
        continue;
      } else {
        return {
          success: false,
          status: response.status,
          message: `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`,
          data: response.data,
          timing
        };
      }
      
    } catch (error: any) {
      const timing = Date.now() - startTime;
      
      if (axios.isAxiosError(error)) {
        const axiosError = error as AxiosError;
        
        if (axiosError.code === 'ECONNABORTED') {
          if (attempt === retries) {
            return {
              success: false,
              status: 0,
              message: `–¢–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫`,
              error: 'Timeout',
              timing
            };
          }
        } else if (axiosError.response?.status === 502) {
          if (attempt === retries) {
            return {
              success: false,
              status: 502,
              message: `–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (502) –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫`,
              timing
            };
          }
        }
      }
      
      if (attempt === retries) {
        return {
          success: false,
          status: 0,
          message: `–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫: ${error.message}`,
          error: error.message,
          timing
        };
      }
      
      console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞: ${error.message}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  return {
    success: false,
    status: 0,
    message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞'
  };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
export async function getAxentaDiagnostics(): Promise<{
  connection: ApiTestResult;
  cors: boolean;
  ssl: boolean;
  timing: number;
}> {
  const startTime = Date.now();
  
  // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const connection = await testAxentaConnection(1, 0);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS (–ø–æ–ø—ã—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞)
  let cors = false;
  try {
    await axios.options('https://axenta.cloud/api/auth/login/', {
      timeout: 5000
    });
    cors = true;
  } catch (error) {
    cors = false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL
  let ssl = false;
  try {
    await axios.get('https://axenta.cloud', {
      timeout: 5000,
      httpsAgent: { rejectUnauthorized: true }
    });
    ssl = true;
  } catch (error) {
    ssl = false;
  }
  
  const timing = Date.now() - startTime;
  
  return {
    connection,
    cors,
    ssl,
    timing
  };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function formatApiResult(result: ApiTestResult): string {
  const status = result.success ? '‚úÖ' : '‚ùå';
  const timing = result.timing ? ` (${result.timing}ms)` : '';
  
  return `${status} ${result.message}${timing}`;
}
