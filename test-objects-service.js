// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è ObjectsService —Å –Ω–æ–≤–æ–π fallback –ª–æ–≥–∏–∫–æ–π

// –ò–º–∏—Ç–∞—Ü–∏—è ObjectsService –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class TestObjectsService {
  constructor(baseURL) {
    this.baseURL = baseURL;
  }

  async testGetObjects() {
    console.log(`üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getObjects –¥–ª—è ${this.baseURL}...`);
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      const response = await fetch(`${this.baseURL}/api/cms/objects/?page=1&per_page=5`);
      
      if (response.ok) {
        const data = await response.json();
        console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: ${data.data?.total || data.count} –æ–±—ä–µ–∫—Ç–æ–≤`);
        return data;
      } else {
        throw new Error(`HTTP ${response.status}`);
      }
    } catch (error) {
      console.log(`üîç –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: ${error.message}`);
      
      // Fallback –∫ –ø—Ä—è–º–æ–º—É Axenta Cloud API
      console.log('üîÑ Fallback –∫ Axenta Cloud API...');
      try {
        const axentaResponse = await fetch('https://axenta.cloud/api/cms/objects/?page=1&per_page=5', {
          headers: {
            'Authorization': 'Token 5e515a8f2874fc78f31c74af45260333f2c84c35',
            'Content-Type': 'application/json'
          }
        });
        
        if (axentaResponse.ok) {
          const axentaData = await axentaResponse.json();
          console.log(`‚úÖ Fallback –∫ Axenta Cloud —É—Å–ø–µ—à–µ–Ω: ${axentaData.count} –æ–±—ä–µ–∫—Ç–æ–≤`);
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –Ω–∞—à–µ–≥–æ API
          return {
            status: "success",
            data: {
              items: axentaData.results.map(obj => ({
                id: obj.id,
                name: obj.name,
                type: "vehicle",
                description: `${obj.deviceTypeName} - ${obj.accountName}`,
                created_at: obj.createdAt,
                updated_at: obj.createdAt,
                accountName: obj.accountName,
                creatorName: obj.creatorName,
                deviceTypeName: obj.deviceTypeName,
                phoneNumbers: obj.phoneNumbers,
                uniqueId: obj.uniqueId,
                status: obj.isActive ? "active" : "inactive",
                is_active: obj.isActive
              })),
              total: axentaData.count,
              page: 1,
              per_page: 5,
              total_pages: Math.ceil(axentaData.count / 5)
            }
          };
        } else {
          throw new Error(`Axenta Cloud HTTP ${axentaResponse.status}`);
        }
      } catch (axentaError) {
        console.log(`‚ùå Fallback –∫ Axenta Cloud –Ω–µ —É–¥–∞–ª—Å—è: ${axentaError.message}`);
        throw axentaError;
      }
    }
  }

  async testGetStats() {
    console.log(`üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getStats –¥–ª—è ${this.baseURL}...`);
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      const response = await fetch(`${this.baseURL}/api/auth/objects/stats`);
      
      if (response.ok) {
        const data = await response.json();
        console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${data.data?.total || data.total} –æ–±—ä–µ–∫—Ç–æ–≤`);
        return data;
      } else {
        throw new Error(`HTTP ${response.status}`);
      }
    } catch (error) {
      console.log(`üîç –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
      
      // Fallback –∫ –ø—Ä—è–º–æ–º—É Axenta Cloud API
      console.log('üîÑ Fallback –∫ Axenta Cloud API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
      try {
        const axentaResponse = await fetch('https://axenta.cloud/api/cms/objects/?page=1&per_page=1', {
          headers: {
            'Authorization': 'Token 5e515a8f2874fc78f31c74af45260333f2c84c35',
            'Content-Type': 'application/json'
          }
        });
        
        if (axentaResponse.ok) {
          const axentaData = await axentaResponse.json();
          const total = axentaData.count || 0;
          
          const stats = {
            total: total,
            active: total,
            inactive: 0,
            scheduled_for_delete: 0,
            by_type: {
              vehicle: total
            },
            by_status: {
              active: total
            }
          };
          
          console.log(`‚úÖ Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${total} –æ–±—ä–µ–∫—Ç–æ–≤`);
          return { status: "success", data: stats };
        } else {
          throw new Error(`Axenta Cloud HTTP ${axentaResponse.status}`);
        }
      } catch (axentaError) {
        console.log(`‚ùå Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–¥–∞–ª—Å—è: ${axentaError.message}`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const emptyStats = {
          total: 0,
          active: 0,
          inactive: 0,
          scheduled_for_delete: 0,
          by_type: {},
          by_status: {}
        };
        
        console.log('üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
        return { status: "success", data: emptyStats };
      }
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ObjectsService...\n');
  
  // –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞
  console.log('=== –¢–ï–°–¢ –õ–û–ö–ê–õ–¨–ù–û–ì–û –ë–≠–ö–ï–ù–î–ê ===');
  const localService = new TestObjectsService('http://localhost:8080');
  try {
    await localService.testGetObjects();
    await localService.testGetStats();
  } catch (error) {
    console.log(`‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: ${error.message}`);
  }
  
  console.log('\n=== –¢–ï–°–¢ –ü–†–û–î–ê–ö–®–ù –ë–≠–ö–ï–ù–î–ê ===');
  const prodService = new TestObjectsService('https://api.axenta.glonass-saratov.ru');
  try {
    await prodService.testGetObjects();
    await prodService.testGetStats();
  } catch (error) {
    console.log(`‚ùå –ü—Ä–æ–¥–∞–∫—à–Ω —Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: ${error.message}`);
  }
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  window.runAllTests = runAllTests;
  window.TestObjectsService = TestObjectsService;
  console.log('üåê –¢–µ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –í—ã–∑–æ–≤–∏—Ç–µ runAllTests()');
}

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ Node.js
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { TestObjectsService, runAllTests };
}
