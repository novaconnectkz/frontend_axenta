#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/auth/users/stats
 */

const https = require('https');
const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    // –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    local: {
        host: 'localhost',
        port: 8080,
        protocol: 'http:',
        path: '/api/auth/users/stats'
    },
    // –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä
    production: {
        host: 'api.axenta.glonass-saratov.ru',
        port: 443,
        protocol: 'https:',
        path: '/api/auth/users/stats'
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(config, token = null) {
    return new Promise((resolve, reject) => {
        const options = {
            hostname: config.host,
            port: config.port,
            path: config.path,
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'UsersWidget-Test/1.0'
            }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if (token) {
            options.headers['Authorization'] = `Token ${token}`;
        }

        console.log(`üîÑ –ó–∞–ø—Ä–æ—Å –∫ ${config.protocol}//${config.host}:${config.port}${config.path}`);
        console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, JSON.stringify(options.headers, null, 2));

        const client = config.protocol === 'https:' ? https : http;
        
        const req = client.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(data);
                    resolve({
                        status: res.statusCode,
                        headers: res.headers,
                        data: jsonData
                    });
                } catch (e) {
                    resolve({
                        status: res.statusCode,
                        headers: res.headers,
                        data: data,
                        parseError: e.message
                    });
                }
            });
        });
        
        req.on('error', (error) => {
            reject(error);
        });
        
        req.setTimeout(10000, () => {
            req.destroy();
            reject(new Error('Request timeout'));
        });
        
        req.end();
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayResults(response, serverName) {
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ${serverName}:`);
    console.log(`üî¢ HTTP Status: ${response.status}`);
    
    if (response.parseError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${response.parseError}`);
        console.log(`üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: ${response.data}`);
        return;
    }
    
    if (response.data.status === 'success') {
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${response.data.status}`);
        const stats = response.data.data;
        
        console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
        console.log(`   –í—Å–µ–≥–æ: ${stats.total || stats.total_users || 0}`);
        console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–µ: ${stats.active || stats.active_users || 0}`);
        console.log(`   –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: ${stats.inactive || stats.inactive_users || 0}`);
        console.log(`   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: ${stats.admins || 0}`);
        console.log(`   –û–±—ã—á–Ω—ã–µ: ${stats.regular_users || 0}`);
        
        if (stats.role_stats && stats.role_stats.length > 0) {
            console.log(`\nüë• –ü–æ —Ä–æ–ª—è–º:`);
            stats.role_stats.forEach(role => {
                console.log(`   ${role.role_name}: ${role.count}`);
            });
        }
        
        if (stats.last_updated) {
            console.log(`\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date(stats.last_updated).toLocaleString()}`);
        }
        
    } else {
        console.log(`‚ùå –°—Ç–∞—Ç—É—Å: ${response.data.status}`);
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${response.data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n');
    
    // –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    try {
        console.log('üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
        const localResponse = await makeRequest(CONFIG.local);
        displayResults(localResponse, '–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä');
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
    }
    
    console.log('\n' + '='.repeat(60) + '\n');
    
    // –¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
    try {
        console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)...');
        const prodResponse = await makeRequest(CONFIG.production);
        displayResults(prodResponse, '–ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)');
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–∏–º
    const token = process.env.AXENTA_TOKEN;
    if (token) {
        console.log('\n' + '='.repeat(60) + '\n');
        try {
            console.log('üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞ (—Å —Ç–æ–∫–µ–Ω–æ–º)...');
            const prodResponseWithToken = await makeRequest(CONFIG.production, token);
            displayResults(prodResponseWithToken, '–ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä (—Å —Ç–æ–∫–µ–Ω–æ–º)');
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: ${error.message}`);
        }
    } else {
        console.log('\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é AXENTA_TOKEN');
        console.log('   –ü—Ä–∏–º–µ—Ä: AXENTA_TOKEN=your_token node test-users-api.js');
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runTests().catch(console.error);
}

module.exports = { makeRequest, CONFIG };
